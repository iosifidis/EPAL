1. Να γράψετε πρόγραμμα σε Python το οποίο:
α) να διαβάζει τους αριθμούς μητρώου και τους βαθμούς 20 μαθητών στο μάθημα της ιστορίας και να τους καταχωρίζει σε δύο λίστες ΑΜ και ΒΑ αντίστοιχα 
β) να υπολογίζει και να εμφανίζει το ΜΟ όλων των μαθητών
γ) να υπολογίζει και να εμφανίζει πόσοι μαθητές είχαν κάτω από το ΜΟ της τάξης
δ) να υπολογίζει και να εμφανίζει μία λίστα κατά αύξουσα σειρά ως προς το βαθμό, που να έχει τον ΑΜ και από δίπλα το βαθμό του κάθε μαθητή. (με τη βοήθεια του αλγόριθμου ταξινόμησης της ευθείας ανταλλαγής)
ε) Θεωρώντας ότι μόνο ένας μαθητής έχει το βαθμό 14 με τη βοήθεια της δυαδικής αναζήτησης που επιστρέφει τη θέση να βρείτε τον ΑΜ του μαθητή με αυτό το βαθμό.

ΛΥΣΗ
def sort(L1,L2):
    N=len(L1)
    for i in range(N-1):
        for j in range(N-1,i,-1):
            if L1[j]<L1[j-1]:
                L1[j],L1[j-1]=L1[j-1],L1[j]
                L2[j],L2[j-1]=L2[j-1],L2[j]

def search(L,key):
    first=0
    last=len(L)-1
    pos=-1
    while pos=-1 and first<=last:
        mid=(first+last)/2
        if L[mid]==key:
            pos=mid
        elif L[mid]>key:
            last=mid-1
        else:
            first=mid+1
    return pos

AM=[]
BA=[]
sum=0
pl=0
for i in range(20):
    am=int(input("Δώσε αριθμό μητρώου μαθητή:"))
    AM.append(am)
    vathmos=float(input("Δώσε βαθμό μαθητή:"))
    BA.append(vathmos)
    sum=sum+vathmos

mo=sum/20
print "Ο μέσος όρος των μαθητών είναι:",mo

for i in range(20):
    if BA[i]<mo:
        pl=pl+1
print "Κάτω από το μέσο όρο της τάξης είχαν",pl,"μαθητές"

sort(BA,AM)
for i in range(20):
    print AM[i],BA[i]

print "Θέση",search(BA,14)


2. Σε ένα ΕΠΑΛ οι 20 μαθητές έγραψαν διαγώνισμα στο μάθημα του Προγραμματισμού και ο καθηγητής τους το διόρθωσε με άριστα το 100. Να γράψετε πρόγραμμα σε Python το οποίο:
α) να διαβάζει για κάθε μαθητή το επώνυμο, το όνομά του και το βαθμό που έγραψε.
β) να κάνει έλεγχο ορθότητας στο βαθμό ώστε να είναι από 0 μέχρι και 100
γ) να καταχωρίζει το επώνυμο σε μία λίστα EP , το όνομα σε μία λίστα ΟΝ και το βαθμό σε μία λίστα ΒΑ
δ) να υπολογίζει και να εμφανίζει το ΜΟ όλου του τμήματος
ε) να εμφανίζει τα ονοματεπώνυμα των μαθητών που πήραν πάνω από το ΜΟ της τάξης.
στ) να υπολογίζει τον μεγαλύτερο βαθμό της τάξης
ζ) να εμφανίζει τα ονοματεπώνυμα των μαθητών που πήραν αυτό το βαθμό.

ΛΥΣΗ

EP=[]
ON=[]
BA=[]
sum=0
for i in range(20):
    onoma=raw_input("Δώσε όνομα μαθητή:")
    ON.append(onoma)
    epon=raw_input("Δώσε επίθετο μαθητή:")
    EP.append(epon)
    vathmo=float(input("Δώσε βαθμό μαθητή:"))
    while not(vathmo>=0 and vathmo<=100):
        vathmo=float(input("Δώσε βαθμό μαθητή:"))
    BA.append(vathmo)
    sum=sum+vathmo

mo=sum/20
print "Μέσος όρος τμήματος",mo
for i in range(20):
    if BA[i]>mo:
        print "O/H",ON[i],EP[i],"είναι πάνω από το μέσο όρο του τμήματος"

max=BA[0]
for i in range(20):
    if BA[i]>max:
        max=BA[i]
print "Ο μεγαλύτερος βαθμός ήταν",max

for i in range(20):
    if BA[i]==max:
        print "Ο/Η",ON[i],EP[i],"είχε τον μεγαλύτερο βαθμό"


3. Στο πρωτάθλημα Μπάσκετ κάθε ομάδα παίρνει 2 βαθμούς για κάθε νίκη και ένα βαθμό για κάθε ήττα. Να γράψετε πρόγραμμα σε python το οποίο:
α) να διαβάζει το όνομα της ομάδας μέχρι να δοθεί για όνομα η λέξη “TELOS” και να το καταχωρεί σε μία λίστα ΟΝ 
β) να διαβάζει τις νίκες και τις ήττες της ομάδας και να τις καταχωρεί στις λίστες NIKES και HTTES αντίστοιχα.
γ) να υπολογίζει και να εμφανίζει τη συνολική βαθμολογία που έχει η κάθε ομάδα
δ) να καταχωρεί τη συνολική βαθμολογία σε μία λίστα SYN
ε) με τη βοήθεια της συνάρτησης bubbleSort (αλγόριθμου της φυσαλίδας) να ταξινομεί τις ομάδες (όλες τις λίστες) κατά φθίνουσα σειρά ως προς τη συνολική βαθμολογία.
στ) να εμφανίζει για κάθε ομάδα, το όνομα ,τις νίκες, τις ήττες και τη συνολική βαθμολογία κατά φθίνουσα σειρά ως προς τη συνολική βαθμολογία.
ζ) να εμφανίζει τα ονόματα των ομάδων που έχουν κάτω από 4 ήττες.
η) Να υπολογίζει το μέσο όρο της συνολικής βαθμολογίας όλων των ομάδων και, αν υπάρχει, να εμφανίζει το όνομα της ομάδας που έχει βαθμούς ίσους με το ακέραιο μέρος του μέσου όρου.

ΛΥΣΗ
def sort(L1,L2,L3,L4):
    N=len(L1)
    for i in range(N-1):
        for j in range(N-1,i,-1):
            if L1[j]>L1[j-1]:
                L1[j],L1[j-1]=L1[j-1],L1[j]
                L2[j],L2[j-1]=L2[j-1],L2[j]
                L3[j],L3[j-1]=L3[j-1],L3[j]
                L4[j],L4[j-1]=L4[j-1],L4[j]

ON=[]
NIKES=[]
HTTES=[]
SYN=[]
sum=0
onoma=raw_input("Δώσε όνομα ομάδας ή TELOS για τερματισμο:")
while onoma!="TELOS":
    ON.append(onoma)
    onoma=raw_input("Δώσε όνομα ομάδας ή TELOS για τερματισμο:")

for i in range(len(ON)):
    print "Για την ομάδα",ON[i]
    nikes=int(input("Δώσε νίκες:"))
    NIKES.append(nikes)
    httes=int(input("Δώσε ήττες:"))
    HTTES.append(httes)

for i in range(len(ON)):
    vathmoi=NIKES[i]*2+HTTES[i]
    print "Η ομάδα",ON[i],"έχει συνολική βαθμολογία",vathmoi
    SYN.append(vathmoi)
    sum=sum+vathmoi

sort(SYN,ON,NIKES,HTTES)
for i in range(len(ON)):
    print ON[i],NIKES[i],HTTES[i],SYN[i]

for i in range(len(ON)):
    if HTTES[i]<4:
        print "Η ομάδα",ON[i],"έχει κάτω από 4 ήτες"

mo=float(sum)/len(ON)
for i in range(len(ON)):
    if SYN[i]==int(mo):
        print "Η ομάδα",ON[i],"έχει βαθμούς ίσους με το ακέραιο μέρος του μέσου όρου"


4. Μία ερευνητική ομάδα πανεπιστημίου καταγράφει κάθε μία ώρα τη θερμοκρασία σε μία συγκεκριμένη περιοχή. Αυτό συμβαίνει για όλες τις ώρες της ημέρας. Να γράψετε πρόγραμμα σε Python το οποίο:
α) να δημιουργεί μία λίστα WRES η οποία να περιέχει τις τιμές από 1 μέχρι και 24 (οι ώρες της ημέρας) [1,2,...24]
β) να διαβάζει 24 θερμοκρασίες με τη σειρά που υπάρχουν οι ώρες στον πίνακα WRES. Δηλαδή πρώτα τη θερμοκρασία για την ώρα 1 μετά για την ώρα 2 μέχρι και τη θερμοκρασία για την ώρα 24.
γ) να τις καταχωρίζει στη λίστα THERM
δ) να υπολογίζει και να εμφανίζει τη μέση θερμοκρασία της ημέρας
ε) να ταξινομεί με χρήση του αλγόριθμου ταξινόμησης της ευθείας ανταλλαγής (φυσαλίδα-bubblesort) τις δύο λίστες σε φθίνουσα σειρά ως προς τις θερμοκρασίες και να τις εμφανίζει με αυτή τη σειρά, εμφανίζοντας για κάθε ώρα το μήνυμα:
“Την ώρα Χ είχαμε θερμοκρασία Υ”
στ) να υπολογίζει και να εμφανίζει τις τρεις μεγαλύτερες θερμοκρασίες καθώς επίσης και τις ώρες που αυτές επιτεύχθηκαν.

ΛΥΣΗ
def sort(L1,L2):
    N=len(L1)
    for i in range(N-1):
        for j in range(N-1,i,-1):
            if L1[j]>L1[j-1]:
                L1[j],L1[j-1]=L1[j-1],L1[j]
                L2[j],L2[j-1]=L2[j-1],L2[j]
                
WRES=range(1,25)
THERM=[]
sum=0
for i in range(1,25):
	print "Για την ώρα",i
	therm=float(input("δώσε θερμοκρασία:))
	THERM.append(therm)
	sum=sum+therm

mo=sum/24
print "Ο μέσος όρος θερμοκρασίας της ημέρας είναι:",mo

sort(THERM,WRES)
for i in range(1,25):
	print "Την ώρα",WRES[i],"είχαμε θερμοκρασία,THERM[i]

print "Οι τρεις μεγαλύτερες θερμοκρασίες ήταν:"
for i in range(3):
	print TERM[i],"την ώρα",WRES[1]


5. Να γράψετε πρόγραμμα σε Python το οποίο:
α) να διαβάζει το επώνυμο και το όνομα των μαθητών μιας τάξης και το σταθερό τηλέφωνο του καθενός. Τα στοιχεία αυτά καταχωρίζονται στις λίστες EP ,ON και THL
αντίστοιχα. Η διαδικασία αυτή να τερματίζεται όταν δοθεί ως Επώνυμο η λέξη «TELOS».
β) στη συνέχεια να ταξινομεί με χρήση του αλγόριθμου ταξινόμησης της ευθείας ανταλλαγής (φυσαλίδα-bubblesort) τις τρεις λίστες σε αύξουσα σειρά ως προς το επώνυμο.
γ) στη συνέχεια να εμφανίζει το επώνυμο, το όνομα και το τηλέφωνο για όλους τους μαθητές με αύξουσα σειρά ως προς το επώνυμο.
δ) να διαβάζει ένα επώνυμο και χρησιμοποιώντας συνάρτηση δυαδικής αναζήτησης, να εμφανίζει το σταθερό τηλέφωνο του μαθητή με αυτό το επώνυμο ή το μήνυμα “δεν υπάρχει” αν δεν υπάρχει αυτό το επώνυμο. Υποδείξεις: Θεωρούμε ότι όλοι οι μαθητές έχουν διαφορετικά επώνυμα και ότι όλα τα τηλέφωνα ξεκινούν από αριθμό που δεν είναι 0.
στ) (Δύσκολο) Τροποποιήστε τη συνάρτηση του αλγόριθμου ταξινόμησης της ευθείας ανταλλαγής ώστε αν είχαμε δύο μαθητές με το ίδιο επώνυμο να εξετάζαμε
το όνομά τους και η κατάταξή τους να γινόταν με βάση το όνομα. Δηλαδή ο Αθανασιάδης Ιωάννης πρέπει να ήταν πριν από τον Αθανασιάδη Κωνσταντίνο.

ΛΥΣΗ
def sort(L1,L2,L3):
    N=len(L1)
    for i in range(N-1):
        for j in range(N-1,i,-1):
            if L1[j]<L1[j-1]:
                L1[j],L1[j-1]=L1[j-1],L1[j]
                L2[j],L2[j-1]=L2[j-1],L2[j]
                L3[j],L3[j-1]=L3[j-1],L3[j]


def sort_alt(L1,L2,L3):
    N=len(L1)
    for i in range(N-1):
        for j in range(N-1,i,-1):
            if L1[j]<L1[j-1]:
                L1[j],L1[j-1]=L1[j-1],L1[j]
                L2[j],L2[j-1]=L2[j-1],L2[j]
                L3[j],L3[j-1]=L3[j-1],L3[j]
	    if L1[j]==L1[j-1]:
		if L2[j]<L2[j-1]:	
			L2[j],L2[j-1]=L2[j-1],L2[j]
                	L1[j],L1[j-1]=L1[j-1],L1[j]
                	L3[j],L3[j-1]=L3[j-1],L3[j]
		
def search(L,key):
	first=0
	last=len(L)-1
	pos=-1
	while pos=-1 and first<=last:
		mid=(first+last)/2
		if L[mid]==key:
			pos=mid		
		elif L[mid]<key:
			first=mid+1
		else:
			last=mid-1
	return pos



EP=[]
ON=[]
THL=[]
ep=raw_input("Δώσε επώνυμο μαθητή ή TELOS για τερματισμό:")
while ep!="TELOS":
	EP.append(ep)
	onoma=raw_input("Δώσε όνομα μαθητή:")
	ON.append(onoma)
	til=int(input("Δώσε τηλέφωνο μαθητή"))
	THL.append(til)
	ep=raw_input("Δώσε επώνυμο μαθητή ή TELOS για τερματισμό:")

sort(EP,ON,THL)
for i in range(len(EP)):
	print EP[i],ON[i],THL[i]

anazitisi=raw_input("Δώσε το επώνυμο που αναζητάς:")	
pos=search(EP,anazitisi)
if pos!=-1
	print "Το τηλέφωνο του μαθητή",anazitisi,"είναι",THL[pos]
else:
	print "δεν υπάρχει"

sort_alt(EP,ON,THL)	
# Η άσκηση δεν ζητάει να εφαρμοστεί το δ μετά από την ταξινόμηση;


6. Το Κράτος ανακοίνωσε τον παρακάτω πίνακα που αφορά τα Τέλη κυκλοφορίας που πρέπει να πληρώσουν οι πολίτες ανάλογα με τον κυβισμό και την παλαιότητα του
αυτοκινήτου.
Μία εταιρεία διαθέτει 20 αυτοκίνητα. Να γράψετε πρόγραμμα σε Python το οποίο:
α) Για κάθε αυτοκίνητο να διαβάζει τον αριθμό κυκλοφορίας και να τον αποθηκεύει σε μία λίστα AR
β) να διαβάζει την παλαιότητα και τα κυβικά εκατοστά του αυτοκινήτου και να υπολογίζει το ποσό που πρέπει να πληρώσουμε για το συγκεκριμένο αυτοκίνητο.
γ) Στη συνέχεια να τοποθετεί αυτό το ποσό σε μία λίστα POSO 
δ) να υπολογίζει και να εμφανίζει το συνολικό ποσό που πρέπει να πληρώσει η εταιρεία
ε) να υπολογίζει και να εμφανίζει το μικρότερο ποσό που πρέπει να πληρώσει για ένα αυτοκίνητο.
στ) να υπολογίζει και να εμφανίζει όλους τους αριθμούς κυκλοφορίας των αυτοκινήτων για τους οποίους θα πληρώσουμε αυτό το μικρότερο ποσό.
ζ) να υπολογίζει και να εμφανίζει όσους αριθμούς κυκλοφορίας ξεκινούν με “ΚΖΝ” και να εμφανίζει αυτούς και το ποσό που πρέπει να πληρώσει για το κάθε αυτοκίνητο
(Θεωρούμε ότι όλοι οι αριθμοί κυκλοφορίας ξεκινούν με 3 κεφαλαία ελληνικά γράμματα)

ΛΥΣΗ

import datetime
now = datetime.datetime.now()
AR=[]
POSO=[]
sum=0
for i in range(20):
	arithmosk=raw_input("Δώσε αριθμό κυκλοφορίας:")
	AR.append(arithmosk)
	xronos=int(input("Δώσε χρόνο κυκλοφορίας:"))
	kivika=int(input("Δώσε κυβικά:"))
	if (now.year-xronos)>10:	
		if kivika<1000:
			poso=120
		elif kivika>=1000 and kivika<=1999:
			poso=240
		else:
			poso=300
	else:
		if kivika<1000:
			poso=90
		elif kivika>=1000 and kivika<=1999:
			poso=130
		else:
			poso=190
	sum=sum+poso
	POSO.append(poso)

print "Το συνολικό ποσό που πρέπει να πληρώσει η εταιρία είναι",sum
min=POSO[0]
for i in range(20):
	if POSO[i]<min:
		min=POSO[i]
print "Το χαμηλότερο ποσό που πρέπει να πληρώσει η εταιρία είναι",min

for i in range(20):
	if POSO[i]==min:
		print "Ο αριθμός",AR[i],"χρειάζεται να πληρώσει το χαμηλό ποσό των",min

for i in range(20):
	if "ΚΝΖ" in AR[i]:
		print "O",AR[i],"πρέπει να πληρώσει:",POSO[i]
	
		
7. Να γράψετε πρόγραμμα σε Python το οποίο:
α) να έχει συνάρτηση countS που να δέχεται σαν είσοδο μία λέξη και να επιστρέφει το πλήθος των συμφώνων που περιέχει (στα Ελληνικά μικρά ή κεφαλαία).
β) να έχει συνάρτηση ταξινόμησης ευθείας ανταλλαγής η οποία να δέχεται μία λίστα και να την ταξινομεί σε αύξουσα σειρά.
γ) να διαβάζει από το πληκτρολόγιο λέξεις μέχρι να μας δοθεί η λέξη “TELOS” και να τις καταχωρεί στη λίστα WORDS.
δ) με τη βοήθεια της παραπάνω συνάρτησης countS να εμφανίζει τη λέξη με το μέγιστο πλήθος συμφώνων
ε) με τη βοήθεια της ταξινόμησης ευθείας ανταλλαγής να ταξινομεί τη λίστα WORDS σε αύξουσα σειρά (αλφαβητική)

ΛΥΣΗ

def countS(word):
	plithos=0
	simf="ΒΓΔΖΘΚΛΜΝΞΠΡΣΤΦΧΨ"
	for char in word:
		if char in simf:
			plithos=plithos+1
	return plithos
	
def sort(L):
    N=len(L)
    for i in range(N-1):
        for j in range(N-1,i,-1):
            if L[j]<L[j-1]:
                L[j],L[j-1]=L[j-1],L[j]
                
WORDS=[]
word=raw_input("Δώσε μια λέξη ή TELOS για να τελειώσεις:")
while word!="TELOS":
	WORD.append(word)
	word=raw_input("Δώσε μια λέξη ή TELOS για να τελειώσεις:")

max=WORDS[0]	
for i in range(len(WORDS):
	if countS(WORD[i])>countS(max):
		max=WORD[i]
print "Η λέξη με το μέγιστο πλήθος συμφώνων είναι η",max	
sort(WORDS)


8. Σε ένα διαγωνισμό ενός video game υπάρχει συμμετοχή αγοριών και κοριτσιών. Να γράψετε πρόγραμμα σε Python το οποίο:
α) να διαβάζει το φύλο (“Α” ή “Κ”) του ή της διαγωνιζόμενης και τη βαθμολογία και να τα καταχωρίζει στις λίστες FY και ΒΑ αντίστοιχα
β) η διαδικασία να επαναλαμβάνεται μέχρι να δοθεί για φύλο η λέξη “TELOS”
γ) να διαχωρίζει τη λίστα ΒΑ σε δύο λίστες μία BAA για τα αγόρια και μία ΒΑΚ για τα κορίτσια.
δ) Με τη βοήθεια της ταξινόμησης ευθείας ανταλλαγής να υπολογίζει και να εμφανίζει το μέγιστο και τον ελάχιστο βαθμό των αγοριών και το μέγιστο και τον
ελάχιστο βαθμό των κοριτσιών.

ΛΥΣΗ
def sort(L):
    N=len(L)
    for i in range(N-1):
        for j in range(N-1,i,-1):
            if L[j]<L[j-1]:
                L[j],L[j-1]=L[j-1],L[j]


FY=[]
BA=[]
BAA=[]
BAK=[]
filo=raw_input("Δώσε Α για Αγόρι και Κ για Κορίτσι ή TELOS για τερματισμό:"
while filo!="TELOS":
	FY.append(filo)
	vathmos=float(input("Δώσε βαθμολογία μαθητή:"))
	BA.append(vathmos)
	filo=raw_input("Δώσε Α για Αγόρι και Κ για Κορίτσι ή TELOS για τερματισμό:"

for i in range(len(FY)):
	if FY[i]=="A":
		BAA.append(BA[i])
	else:
		BAK.append(BA[i])
		
sort(BAA)
sort(BAK)
print "Ο μέγιστος βαθμός για τα αγόρια είναι",BAA[len(BAA)],"και ο ελάχιστος είναι",BAA[0]
print "Ο μέγιστος βαθμός για τα κορίτσια είναι",BAK[len(BAK)],"και ο ελάχιστος είναι",BAK[0]	

	
9. Να γράψετε πρόγραμμα σε Python το οποίο:
α) να διαβάζει το όνομα μιας πόλης (ή χωριού), το νομό στον οποίο ανήκει (με κεφαλαία Ελληνικά γράμματα και τα δύο) και τον πληθυσμό της και να τα καταχωρίζει στις λίστες ON, NOM, PL αντίστοιχα.
β) να επαναλαμβάνει τη διαδικασία μέχρι να δοθεί για όνομα πόλης η λέξη “ΤΕΛΟΣ”
γ) να εμφανίζει το όνομα και το νομό για όσες πόλεις (χωριά) έχουν πληθυσμό πάνω από 4.000 κατοίκους
δ) να υπολογίζει και να εμφανίζει πόσο είναι το σύνολο των κατοίκων από όλες τις πόλεις (χωριά)
ε) με τη βοήθεια της ταξινόμησης ευθείας ανταλλαγής να ταξινομεί τις πόλεις με φθίνουσα ταξινόμηση και να εμφανίζει τις 3 πόλεις με το μεγαλύτερο πληθυσμό
γράφοντας για κάθε πόλη: το όνομά της, το νομό και τον πληθυσμό της
στ) Να εμφανίζει το όνομα και τον πληθυσμό των πόλεων που το όνομά τους ξεκινά με το κείμενο “ΝΕΑ” π.χ. ΝΕΑ ΑΓΧΙΑΛΟΣ 1500

ΛΥΣΗ
def sort(L1,L2,L3):
    N=len(L1)
    for i in range(N-1):
        for j in range(N-1,i,-1):
            if L1[j]<L1[j-1]:
                L1[j],L1[j-1]=L1[j-1],L1[j]
                L2[j],L2[j-1]=L2[j-1],L2[j]
                L3[j],L3[j-1]=L3[j-1],L3[j]

ON=[]
NOM=[]
PL=[]
sum=0
onoma=raw_input("Δώσε όνομα πόλης ή χωριού με κεφαλαία γράμματα:")
while onoma!="ΤΕΛΟΣ":
	ON.append(onoma)
	nomos=raw_input("Δώσε όνομα νομού που ανήκει η πόλη ή το χωριό, με κεφαλαία γράμματα:")
	NOM.append(nomos)
	pli=int(input("Δώσε πληθυσμό της πόλης ή του χωριού:)
	PL.append(pli)
	sum=sum+pli
	onoma=raw_input("Δώσε όνομα πόλης ή χωριού με κεφαλαία γράμματα:")

for i in range(len(ON)):
	if PL[i]>4000:
		print "Η πόλη/χωρίό με όνομα",ON[i],"που ανήκει στο νομό",NOM[i],"έχει πάνω από 4000 κατοίκους"

print "Το σύνολο των κατοίκων είναι",sum

sort(PL,ON,NOM)
for i in range(3)):
	print ON[i],NOM[i],PL[i]

for i in range(len(ON)):
	if "NEA" in ON[i]: # Εδώ θα χάσω τις πόλεις που μπορεί να μην ξεκινάνε από ΝΕΑ αλλά να περιέχουν την λέξη ΝΕΑ μέσα (δεν ξέρω αν υπάρχουν τέτοιες)
		print ON[i],PL[i]
