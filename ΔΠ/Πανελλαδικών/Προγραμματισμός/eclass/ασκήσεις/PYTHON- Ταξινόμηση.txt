1 Σε ένα αγώνα δισκοβολίας συμμετέχουν 20 αθλητές. Κάθε αθλητής έκανε μόνο μια έγκυρη ρίψη, που καταχωρείται ως επίδοση του αθλητή και εκφράζεται σε μέτρα. Να αναπτύξετε πρόγραμμα που:
α. Θα διαβάζει το όνομα για κάθε αθλητή και θα το αποθηκεύει σε λίστα ON.
β. Θα διαβάζει την επίδοση κάθε αθλητή και θα την αποθηκεύει σε λίστα EPID.
γ. Θα ταξινομεί τους αθλητές με βάση την επίδοση που πέτυχαν.
δ. Θα εμφανίζει τους τρείς πρώτους αθλητές με την καλύτερη επίδοση

ΛΥΣΗ
def sort(L1,L2):
    N=len(L1)
    for i in range(N-1):
        for j in range(N-1,i,-1):
            if L1[j]>L1[j-1]:
                L1[j],L1[j-1]=L1[j-1],L1[j]
                L2[j],L2[j-1]=L2[j-1],L2[j]
    return L1,L2

ON=[]
EPID=[]
for i in range(20):
    onoma=raw_input("Δώσε όνομα αθλητή:")
    ON.append(onoma)
    epidosi=float(input("Δώσε επίδοση αθλητή σε μέτρα:"))
    EPID.append(epidosi)
sort(EPID,ON)
for j in range(3):
    print ON[j],"με επίδοση",EPID[j]
        

2. Κατά την απογραφή του έτους 2011 σε ένα χωριό απογράφηκαν 1800 άτομα. Να γραφεί πρόγραμμα με το οποίο:
α. Θα αποθηκεύεται το έτος γέννησης όλων των ατόμων σε λίστα ETOS και το ονοματεπώνυμο σε άλλη λίστα ON με αντιστοιχία θέσεων.
β. Θα υπολογίζεται και θα εμφανίζεται το πλήθος των ατόμων κατά ηλικία συνοδευόμενο από τη φράση:
0 έως και 25 χρόνων: “ΝΕΟΙ”
25 έως και 50 χρόνων: “ΜΕΣΗΛΙΚΕΣ”
άνω των 50 χρόνων: “ΓΕΡΟΝΤΕΣ”
γ. Θα εμφανίζονται οι ηλικίες των 4 μεγαλύτερων ατόμων.
δ. Θα εμφανίζονται τα ονόματα των κατοίκων που έχουν τις 4 μεγαλύτερες ηλικίες.

ΛΥΣΗ
def sort(L1,L2):
    N=len(L1)
    for i in range(N-1):
        for j in range(N-1,i,-1):
            if L1[j]>L1[j-1]:
                L1[j],L1[j-1]=L1[j-1],L1[j]
                L2[j],L2[j-1]=L2[j-1],L2[j]
    return L1,L2

import datetime
now = datetime.datetime.now()
p0=0
p25=0
p50=0
ETOS=[]
ON=[]
for i in range(1800):
    etos=int(input("Δώσε το έτος γέννησης:"))
    ETOS.append(etos)
    onoma=raw_input("Δώσε το ονοματεπώνυμο:")
    ON.append(onoma)
sort(ETOS,ON)
for i in range(1800):
    if now.year-ETOS[i]<=25:
        p0=p0+1
    elif now.year-ETOS[i]<=50:
        p25=p25+1
    elif now.year-ETOS[i]>50:
        p50=p50+1
print p0,"ΝΕΟΙ"
print p25,"ΜΕΣΗΛΙΚΕΣ"
print p50,"ΓΕΡΟΝΤΕΣ"
for i in range(4):
    print now.year-ETOS[i],ON[i]

3. Να γραφεί πρόγραμμα με το οποίο να καταχωρούνται σε 2 λίστες τα ονόματα των 12 μηνών του χρόνου και η μέση θερμοκρασία για κάθε μήνα αντίστοιχα. Στη συνέχεια να υπολογίζονται και να εμφανίζονται οι 2 υψηλότερες και οι 2 χαμηλότερες θερμοκρασίες καθώς και τα ονόματα των μηνών κατά τους οποίους σημειώθηκαν οι θερμοκρασίες αυτές.

ΛΥΣΗ
def sort(L1,L2):
    N=len(L1)
    for i in range(N-1):
        for j in range(N-1,i,-1):
            if L1[j]>L1[j-1]:
                L1[j],L1[j-1]=L1[j-1],L1[j]
                L2[j],L2[j-1]=L2[j-1],L2[j]
    return L1,L2

MINAS=[]
THERM=[]
for i in range(12):
    minas=raw_input("Δώσε όνομα μήνα:")
    MINAS.append(minas)
    therm=float(input("Δώσε θερμοκρασία:"))
    TERM.append(therm)
sort(THERM,MINAS)
print "Οι δυο υψηλότερες θερμοκρασίες ήταν:"
for i in range(2):
    print MINAS[i],THERM[i],"βαθμοί"
print "Οι δυο χαμηλότερες θερμοκρασίες ήταν:"
for i in range(11,13):
    print MINAS[i],THERM[i],"βαθμοί"

4. Στο αγώνισμα 10000 μέτρων του στίβου συμμετέχουν 30 αθλητές. Να αναπτύξετε πρόγραμμα που:
α. Θα διαβάζει για κάθε αθλητή το όνομα και την επίδοσή του.
β. Θα ταξινομεί τους αθλητές ως προς την επίδοσή τους.
γ. Θα εμφανίζει τα ονόματα και τις επιδόσεις των τριών πρώτων αθλητών, αρχίζοντας από εκείνον με την καλύτερη επίδοση.
δ. Θα εμφανίζει τα ονόματα και τις επιδόσεις των πέντε τελευταίων αθλητών, αρχίζοντας από εκείνον με την καλύτερη επίδοση.

ΛΥΣΗ
def sort(L1,L2):
    N=len(L1)
    for i in range(N-1):
        for j in range(N-1,i,-1):
            if L1[j]>L1[j-1]:
                L1[j],L1[j-1]=L1[j-1],L1[j]
                L2[j],L2[j-1]=L2[j-1],L2[j]
    return L1,L2

ON=[]
EPID=[]
for i in range(30):
    onoma=raw_input("Δώσε όνομα αθλητή:")
    ON.append(onoma)
    epidosi=float(input("Δώσε επίδοση αθλητή:"))
    EPID.append(epidosi)
sort(EPID,ON)
print "Οι 3 καλύτεροι αθλητές ήταν:"
for i in range(3):
    print ON[i],EPID[i]
print "Οι 5 τελευταίοι αθλητές ήταν:"
for i in range(25,31):
    print ON[i],EPID[i]


5. Σε μία τράπεζα, αυτή τη χρονική στιγμή υπάρχουν 20.000 πελάτες-καταθέτες, που ο κάθε ένας τους έχει καταθέσει ένα ποσό χρημάτων σε ευρώ στο δικό του τραπεζικό λογαριασμό. Η διοίκηση της Τράπεζας αποφάσισε να δωρίσει στους πέντε πελάτες της με τα μεγαλύτερα ποσά κατάθεσης ένα επταήμερο ταξίδι στην Καραϊβική. Να κατασκευάσετε πρόγραμμα το οποίο:
α. Διαβάζει το ονοματεπώνυμο του κάθε καταθέτη και το χρηματικό ποσό που έχει καταθέσει στην τράπεζα και να τα εισάγει σε κατάλληλες λίστες.
β. Εμφανίζει το ονοματεπώνυμο των πελατών-καταθετών που δικαιούνται το παραπάνω ταξίδι.

ΛΥΣΗ
def sort(L1,L2):
    N=len(L1)
    for i in range(N-1):
        for j in range(N-1,i,-1):
            if L1[j]>L1[j-1]:
                L1[j],L1[j-1]=L1[j-1],L1[j]
                L2[j],L2[j-1]=L2[j-1],L2[j]
    return L1,L2

ON=[]
MONEY=[]
for i in range(20000):
    onoma=raw_input("Δώσε όνομα καταθετη:")
    ON.append(onoma)
    lefta=float(input("Δώσε χρήματα καταθέτη:"))
    MONEY.append(lefta)
sort(MONEY,ON)
print "Οι πελάτες που δικαιούνται το ταξίδι είναι:"
for i in range(5):
    print ON[i]

6. Να γραφεί πρόγραμμα για τη γραμματεία ενός σχολείου το οποίο διαβάζει τα ονόματα και τους βαθμούς των 250 μαθητών του σχολείου και στη συνέχεια εμφανίζει, ταξινομημένα κατά αλφαβητική σειρά, ξεχωριστά σε δυο λίστες τα ονόματα και τη βαθμολογία των μαθητών που προάγονται και σε δυο άλλες λίστες αυτών που απορρίπτονται.

ΛΥΣΗ
def sort(L1,L2):
    N=len(L1)
    for i in range(N-1):
        for j in range(N-1,i,-1):
            if L1[j]<L1[j-1]:
                L1[j],L1[j-1]=L1[j-1],L1[j]
                L2[j],L2[j-1]=L2[j-1],L2[j]
    return L1,L2

ON=[]
VATHMOI=[]
for i in range(250):
    onoma=raw_input("Δώσε όνομα μαθητή:")
    ON.append(onoma)
    vathmo=float(input("Δώσε επίδοση αθλητή:"))
    VATHMOI.append(vathmo)

PRON=[]
PRVATH=[]
APON=[]
APVATH=[]
for i in range(250):
    if VATHMOI[1]>=10:
        PRON.append(ON[i])
        PRVATH.append(VATHMOI[i])
    else:
        APON.append(ON[i])
        APVATH.append(VATHMOI[i])
sort(PRON,PRVATH)
sort(APON,APVATH)
for i in range(len(PRON)):
    print PRON[i],PRVATH[i]
for i in range(len(APON)):
    print APON[i],APVATH[i]

7. Από τους 220 αθλητές των προκριματικών αγώνων 800 μέτρων για την Ολυμπιάδα προκρίνονται οι 20 με τον καλύτερο χρόνο. Να αναπτύξετε πρόγραμμα που θα διαβάζει τα ονόματα και τους χρόνους των αθλητών και θα εμφανίζει τα ονόματα αυτών που προκρίθηκαν, καθώς και τον καλύτερο και το χειρότερο χρόνο που
σημειώθηκε στη διάρκεια των προκριματικών. (Να θεωρήσετε ότι όλοι οι χρόνοι είναι διαφορετικοί μεταξύ τους).

ΛΥΣΗ
def sort(L1,L2):
    N=len(L1)
    for i in range(N-1):
        for j in range(N-1,i,-1):
            if L1[j]>L1[j-1]:
                L1[j],L1[j-1]=L1[j-1],L1[j]
                L2[j],L2[j-1]=L2[j-1],L2[j]
    return L1,L2

ON=[]
EPID=[]
for i in range(220):
    for i in range(30):
    onoma=raw_input("Δώσε όνομα αθλητή:")
    ON.append(onoma)
    epidosi=float(input("Δώσε επίδοση αθλητή:"))
    EPID.append(epidosi)
sort(EPID,ON)
for i in range(20):
    print "Προκρίθηκαν οι",ON[i]
print "Ο καλύτερος χρόνος ήταν ο",EPID[0]
print "Ο χειρότερος χρόνος ήταν ο",EPID[219]

8. Κάθε μήνα εκδίδονται 20 περιοδικά κοινωνικού ενδιαφέροντος που ανήκουν σε διαφορετικούς εκδότες και διατίθενται προς πώληση. Να αναπτύξετε πρόγραμμα το οποίο:
α. Για κάθε περιοδικό, να διαβάζει, την ονομασία του, τον εκδότη και τον αριθμό των αντιτύπων που πούλησε σε διάστημα ενός μήνα.
β. Καλεί συνάρτηση η οποία εμφανίζει την ονομασία τον εκδότη και τον αριθμό αντιτύπων των περιοδικών, ταξινομημένα ως προς τον αριθμό αντιτύπων, ξεκινώντας από αυτό με τις περισσότερες πωλήσεις. Σε περίπτωση που υπάρχουν περιοδικά με ίδιες πωλήσεις τότε αυτά να εμφανίζονται αλφαβητικά

ΛΥΣΗ
def sort(L1,L2,L3):
    N=len(L1)
    for i in range(N-1):
        for j in range(N-1,i,-1):
            if L1[j]>L1[j-1]:
                L1[j],L1[j-1]=L1[j-1],L1[j]
                L2[j],L2[j-1]=L2[j-1],L2[j]
                L3[j],L3[j-1]=L3[j-1],L3[j]
            if L1[j]==L[j-1]:
                if L2[j]<L2[j-1]:
                    L1[j],L1[j-1]=L1[j-1],L1[j]
                    L2[j],L2[j-1]=L2[j-1],L2[j]
                    L3[j],L3[j-1]=L3[j-1],L3[j]


    return L1,L2,L3

for i in range(20):
    onoma=raw_input("Δώσε όνομα περιοδικού:")
    ekdotis=raw_input("Δώσε όνομα εκδότη:")
    antitipa=int(input("Δώσε αριθμό αντιτύπων που πούλησε σε ένα μήνα:"))

sort(ANTITYPA,ONOMA,EKDOTHS)
for i in range(20):
    print ONOMA[i],EKDOTHS[i],ANTITYPA[i]


9. Να γραφεί πρόγραμμα το οποίο:
α. Διαβάζει αριθμούς μέχρι να δοθεί ο αριθμός 0 και τους καταχωρίζει στη λίστα AR.
β. Καλεί συνάρτηση η οποία δέχεται την παραπάνω λίστα και επιστρέφει την τιμή True, αν η λίστα είναι ταξινομημένη κατά αύξουσα σειρά, ή την τιμή False αν δεν είναι ταξινομημένη.
γ. Εμφανίζει το μήνυμα «Ταξινομημένη λίστα» ή το μήνυμα «Μη» αντίστοιχα, ανάλογα με την επιστρεφόμενη τιμή της συνάρτησης

ΛΥΣΗ
def sort(L):
    for i in range(len(L)):
       if L[i]<L[i-1]:
            lista=True
       else:
            lista=False
    return lista

AR=[]
done=True
while done==True:
    number=int(input("Δώσε αριθμό ή 0 για να βγεις:"))
    if number==0:
        done=False
    else:
        AR.append(number)

result=sort(AR)
if result==True:
    print "Ταξινομημένη λίστα"
else:
    print "Μη Ταξινομημένη λίστα"


10. Μια πολυεθνική εταιρεία ζήτησε από τους διευθυντές των παραρτημάτων Ελλάδας και Κύπρου να καταθέσουν ο καθένας, σε ηλεκτρονική μορφή, μια λίστα με το ονοματεπώνυμο των υπαλλήλων που απασχολούνται σε κάθε χώρα. Στον υπεύθυνο πληροφορικής της εταιρείας στάλθηκε η λίστα L1 του παραρτήματος της Ελλάδας με 860 καταχωρίσεις και η λίστα L2 του παραρτήματος Κύπρου με 790 καταχωρίσεις. Να γραφεί πρόγραμμα το οποίο:
α. Καταχωρίζει στις λίστες L1 και L2 τα ονόματα των υπαλλήλων Ελλάδας και Κύπρου, αντίστοιχα.
β. Χρησιμοποιεί συνάρτηση που θα κατασκευάσετε, η οποία δέχεται μια λίστα και την επιστρέφει ταξινομημένη κατά αύξουσα σειρά, και ταξινομεί αλφαβητικά τις 2 λίστες.
γ. Δημιουργεί τελική λίστα L που περιέχει όλους τους υπαλλήλους, αλφαβητικά ταξινομημένους. Η ταξινόμηση της λίστας L να γίνεται ταυτόχρονα με τη συγχώνευση.
δ. Εμφανίζει την τελική λίστα.

ΛΥΣΗ
